%% Bible-TeX macros, see bibletex-doc.pdf

\newdimen\lrmargin  \lrmargin=10mm
\margins/2 a4 (23,27,20,20)mm

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Intro
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   Loading packages.
   \_cod

\load[vlna]  % single-letter prepositions and splitting hyphen managed specially in Czech
\load[mte]   % micro typographical extensions

   \_doc
   Basic settings.
   \_cod

\typosize[11/13]       % typesetting size of Bible text
\hyperlinks\Blue\Blue  % hyperlinks activated

\parindent=20pt
\nopagenumbers
\enablemte             % micro typographical extensions enabled
\singlechars{Czech}{AaIiVvOoUuSsZzKk}  % lowercase "a" added to this family

\showboxbreadth=0
\let\notecolor=\Red

\def\LightGrey {\_setcmykcolor{0 0 0 .1}}
\def\LiRed {\_setcmykcolor{0 .2 .2 0}}

   \_doc
   Fonts.
   \_cod

\fontfam[lm]
\fontfam[Heros]        % fonts for notes
\isfile{f-biblon.opm}\iftrue
   \fontfam[biblon]    % fonts for Bible text
\else
   \let\Biblon=\LMfonts
\fi

\fontdef\bookfont{\setfontsize{at19.pt}\bf}
\fontdef\chapfont{\setfontsize{at13.pt}\bf}
\fontdef\markfont{\setfontsize{at7pt}\rm}
\fontdef\captionfont{\Heros\cond\setfontsize{at8pt}\bf}
\def\headfont{\Biblon\setfontsize{at10pt}\rm}

   \_doc
   Auxiliary macros.
   `\printwarn {<text>}` prints warning.
   `\sedef {<name>}{<body>}` is expanded `\sdef`.
   \_cod

\def\printwarn#1{\wterm{WARNING (l.\the\inputlineno) #1}}
\def \sedef #1{\_ea\_edef \_csname#1\_endcsname}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec The main loop over Bible books
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   The `\processbooks` macro does two loops over all `\printedbooks`.
   The `\printedbooks` list can or cannot be finalized by a space.
   The first loop body sets `\pbook!<a-mark>` used for hyperlinks.
   The second loop body does:
   \begitems
   * Defines `\bmark` as <b-mark> (a mark of the book used in file names).
   * Defines `\amark` as <a-mark> (an actual mark of the book used in the text
     and maybe in the filenames).
   * Defines `\btit` as the book title.
   * Prints title of the book to the terminal and to the log.
   * Calls `\NewBook{<title>}{<a-mark>}`
   * Calls `\bex!<a-mark>` in order to set something extra.
   * Inputs introduction file.
   * Inputs format definition file.
   * Inputs notes file.
   * Calls `\bpr!<a-mark>` in order to print a preface of the book,
   * Inputs txs file with original text of the Bible using `\bibleinput`,
     i.e.\ prints the text.
   * Calls `\bpo!<a-mark>` in order to print a closing text of the book.
   \enditems
   \_cod

\def\processbooks {\par
   \checknochapbooks
   \ea\processbooksA \printedbooks\ignoreit. {}
   \ea\processbooksB \printedbooks\ignoreit. {}
}
\def\processbooksA #1 {%
   \if\relax#1\relax \else \sxdef{pbook!#1}{}\ea\processbooksA \fi
}
\def\processbooksB #1 {%
   \if\relax#1\relax \else
      \edef\amark{#1}
      \edef\bmark{\cs{f!#1}}
      \edef\btit{\cs{btit!#1}}
      \begingroup
         \wterm{** \cs{btit!#1} {#1} **}
         \NewBook{#1}
         \cs{bex!#1}
         \isfile{\introfile}\iftrue
            \begblock
            \dest[i:\currbook]
            \introtit
            \input{\introfile}
            \endblock
         \fi
         \input{\fmtfile}
         \input{\notesfile}
         \cs{bpr!#1}
         \bibleinput{\txsfile}
         \cs{bpo!#1}
      \endgroup
      \ea \processbooksB
   \fi
}
\def\setheadline{\global\headline={\headfont
   \ifodd\pageno
       \rlap{\it\bibname\hss}%
       \hfil \the\pageno\hfil
       \hbox to\lrmargin{\hss\bf\btit\ifx^\botmark^\else\space \botmark\fi}%
       \kern-\lrmargin
   \else
       \kern-\lrmargin
       \hbox to\lrmargin{\bf\btit\ \firstmark\hss}%
       \hfil\the\pageno\hfil
       \llap{\hss\it\bibname}%
   \fi
   }
}

   \_doc
   `\NewBook``{<a-mark>}` ejects previous page, prepeares header and prints the book title.
   \_cod

\def\NewBook#1{\vfil\supereject
   \edef\currbook{#1}\let\prelinkB=\currbook \chapnum=0
   \def\prelinkC{0}\def\prelinkV{0}
   \global\headline={\hfil\setheadline}
   \line{\hss\bookfont\btit\hss}
   \par\nobreak\medskip
}

   \_doc
   Text block with grey background splittable to more pages ised for
   introduction text, see OpTeX trick 0031.
   \_cod

\newcount\blocklevel  % nesting level of blocks
\def\begblock{\par\bgroup
   \advance\blocklevel by1 \advance\leftskip by\iindent \rightskip=\leftskip
   \medskip
   \pdfsavepos \ea\_wref\ea\Xblock\ea{\ea{\the\blocklevel}B{\the\pdflastypos}}
   \nobreak \medskip
}
\def\endblock{\par\nobreak\medskip
   \pdfsavepos \ea\_wref\ea\Xblock\ea{\ea{\the\blocklevel}E{\the\pdflastypos}}
   \medskip \egroup
}
\refdecl{%
   \def\Xblock#1#2#3{\ifnum#1=1 \edef\tmp{frm:\ea\ignoresecond\_currpage}^^J
      \unless\ifcsname \tmp \endcsname \sxdef{\tmp}{}\fi^^J
      \sxdef{\tmp}{\cs{\tmp}#2{#3}}\fi}
}
\newdimen\frtop \newdimen\frbottom % positions of top and bottom text on the pages
\def\frcolor{.9 g } % light grey -- color of blocks.
\pgbackground={%
   \slet{tmp}{frm:\the\pageno}
   \ifx\tmp\undefined \def\tmp{}\fi
   \frtop=\dimexpr \pdfpageheight-\voffset+\smallskipamount\relax
   \frbottom=\dimexpr\pdfpageheight-\voffset-\vsize-\medskipamount\relax
   \ifx\frnext y \edef\tmp{B{\number\frtop}\tmp}\global\let\frnext n\fi
   \ea\printframes \tmp B{0}E{\number\frbottom}
   \ifx\frameslist\empty \else
   \pdfliteral{q \frcolor 1 0 0 1 0 \bp{-\pdfpageheight} cm \frameslist Q}\fi
}
\def\printframes B#1#2E#3{\ifnum#1=0 \else
   \printframe {\hoffset}{#3sp}{\_xhsize}{\ifnum#1=-1 \number\frtop\else#1\fi sp-#3sp}
   \ifx^#2^\else \global\let\frnext=y \let\printframes=\relax \fi
   \expandafter\printframes\fi
}
\def\frameslist{}
\def\printframe #1#2#3#4{\edef\frameslist{\frameslist
    \bp{#1} \bp{#2} \bp{#3} \bp{#4} re f }%
}

   \_doc
   We want \code{<Fm 4>} to be a link to Fm/1:4 because it is a
   single-chapter book. Compare \code{<Gn 4>} which is a link to Gn/4:1.
   There is a list of single-chapter books `\nochapbooks`. User
   must define it. The marks of these single-chapter books are separated by spaces
   here. The first and the last space are added to the `\nochapbooks`
   macro because we need them in `\brefBookChapter`.
   \_cod

\def\checknochapbooks {%
   \ifx\nochapbooks\undefined
      \printwarn{\noexpand\nochapbooks (boks without chapters) undefined.}%
      \def\nochapbooks{}%
   \else  \edef\nochapbooks{\space\nochapbooks\space}\fi
}

   \_doc
   Note that each book of the Bible is processed in the group.
   It means that all data from notes, formats etc. are stored
   in the memory only temporary for processing single book. After
   the Book is finalized, the \TeX/ memory is freed.

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Book titles
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   The macro `\BookTile <b-mark> <a-mark> {<title>}` declares titles
   of each Bible books. The <b-mark> is a book mark used in file names
   and <a-mark> is an actual book mark used in printed text.

   The mapping is done here:
   `\def\btit!<a-mark>{<title>}`, `\def\f!<a-mark>{<b-mark>}`.

   The macro is defined as `\outer` because we don't want to see obscure
   errors due to missing a space after `<b-mark>` or `<a-mark>`.
   \_cod

\outer\def\BookTitle #1 #2 #3{\sxdef{btit!#2}{#3}\sxdef{f!#2}{#1}}

   \_doc
   The `\BookException <a-mark> {<code>}` macro adds the <code> to the
   `\bex!<a-mark>` macro. It is used in`\processbooks`
   loop in the group before files are read. You can redefine some filenames
   or something more special here.\nl
   Macros `\BookPre` and `\BookPost` are defined similarly.
   \_cod

\long\def\myaddto#1#2{\ifcsname#1\endcsname
   \gobal\ea\addto\csname#1\endcsname{#2}\else \global\sdef{#1}{#2}\fi}
\outer\long\def\BookException #1 #2{\myaddto{bex!#1}{#2}}
\outer\long\def\BookPre       #1 #2{\myaddto{bpr!#1}{#2}}
\outer\long\def\BookPost      #1 #2{\myaddto{bpo!#1}{#2}}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Actions
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   We create the output in two steps. First step: the data from `\Note`
   etc.\ are read and saved to the \TeX/ memory. For each such data element the
   \"action" is registered to a list of actions of the given verse. Each
   Bible verse has its list of actions.
   The second step: the Bible verses are read from a `.txs`
   file and all appropriate actions (registered to this verse) are
   processed before the verse text is printed. These actions can modify the
   selected parts of the verse text.\nl
   `\alist!<full-vref>` is the list of actions associated with the verse
   `<full-vref>`. The <full-vref> is full reference to the verse in the format
               <book-mark>/<chapter-num>:<verse-num>\nl
   `\newaction{<full-vref>}{<action-body>}` allocates new action.
   \_cod

\def\newaction#1#2{%
   \unless\ifcsname alist!#1\endcsname \sdef{alist!#1}{}\fi
   \ea\addto\csname alist!#1\endcsname{#2}%
}

   \_doc
   A typical \"action" is `\replpre`. The actions are processed for each
   Bible verse when the verse text is saved to the `\buff` macro. The
   `\buff` macro is processed after all actions of given verse are done.\nl
   `\replpre{<prefix>}{<text>}{<fail>}` replaces first occurrence of <text>
   by `<prefix>{<text>}` in `\buff` macro. If the <text> is empty then
   `<prefix>{}` is inserted at the beginning of the `\buff`.\nl
   If <text> does not exists then <fail> is processed. The <fail>
   macro can use `\text` where <text> is saved.
   \_cod

\def\replpre#1#2#3{%
   \ifx^#2^\def\tmp{#1{}}\ea\ea\ea\def\ea\ea\ea\buff\ea\ea\ea{\ea\tmp\buff}%
   \else
      \def\replpredo##1#2##2\end{%
         \ifx^##2^\def\text{#2}#3% <fail>
         \else \replsave ##1#1{#2}##2\end \fi
      }%
      \def\replsave##1#2\end{\def\buff{##1}}%
      \ea\replpredo\buff#2\end
   \fi
}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec The `\Note` macro
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   The first parameter of the `\Note` macro is `<gen-vref>`.
   It is generalized reference to the Bible verse. It can be
   `<chapter-num>:<verse>` (the <book-mark> is appended from
   `\CommentedBook` token list) or `<chapter-num>:<verse-from>-<verse-to>`
   (only <verse-from> is used for generating <gen-vref>.\nl
   `\gentovref{<gen-vref>}` expands to <full-vref>. 
   \_cod

\newtoks\CommentedBook
\def\gentovref#1{\the\CommentedBook/\gentovrefA#1-\end}
\def\gentovrefA#1-#2\end{#1}

   \_doc
   `\renumref <full-vref>\relax` does re-caclulating of <full-vref> using `\renum` data.
   \_cod

\def\renumvref #1/#2\relax{#1/\trycs{rn!\tmark!#1/#2}{#2}}

   \_doc
   The `<word>` given as a parameter of the `\Note` macro (see bellow) is used as a word
   phrase which should be be searched in the given verse text. This parameter `<word>`
   is transformed first by expansion of `\transformword{<word>}` to the `<tword>` variant
   and the `<tword>` is actually used for searching. The `\transformword{<word>}`
   expands to the variant of the <word> declared by `\vdef`. If not declared then it
   expands to the <word> itself, i.e <tword> is equal to <word> in this case.
   \_cod

\def\transformword#1{%
   \ifcsname v!\tmark!#1\endcsname \lastnamedcs
   \else #1\fi
}

   \_doc
   `\Note <gen-vref> <space> {<word>} <text> \par`
   transforms <word> to the <tword> (see above),
   saves <text> and activates replace-action of <tword> to
   `\doNote{<note-num>}{<tword>}` in given verse. 
   \nl
   There is an alternative syntax 
   `\Note <gen-vref> <space> {<word>}={<pword>} <text> \par`
   If <pword> is given then is is printed in the note instead <tword>.
   More precisely: transformed <word> is used for searching
   (and it is kept in the verse unchanged) but <pword> is
   printed in the note.\nl
   The `\ww` can precede `\Note`. If it is true then the <word> is prepared in
   `\nextww` and `<pword>` is in `\nextwwA`. Otherwise, the macros `\nextww`
   and `\nextwwA` are undefined.\nl
   `\Note` does exactly following:
   \begitems
   * Allocates new <note-num>,
   * Transforms <gen-vref> to <full-vref> using `\gentovref`.
   * Modifies <full-vref> if `\renum` was declared using `\renumvref` and
     saves the result to `\fullvrefm`.
   * Use `\nextww` and `\nextwwA` as <tword> and <pword> if they are defined.
   * Otherwise transforms <word> to <tword> by `\transformword`.
   * Reads <pword> (word to be printed in the note) if the alternative syntax
     with `={<pword>}` is used. Else <pword> is equal to <tword>. 
   * Defines `\notetext!<note-num>` as <text>.
   * Defines `\noteref!<note-num>` as <full-vref>.
   * Defines `\notepre!<note-num>` as numeric part of modified <full-vref>
     and calculates <from>-<to> part (if exists in <gen-vref>) using `\renumlabel` macro.
     This is printed prefix of the `\Note`.
   * Defines `\pword!<note-num>` as <pword>,
   * Does\nl
   `\newaction{<full-vref>}{\replpre{\doNote{<note-num>}}{<tword>}{\notefail{<note-num>}}}`.
   \enditems
   \_cod

\newcount\notenum
\outer\def\Note #1 #2{%
   \incr\notenum
   \edef\fullvref{\gentovref{#1}}%
   \edef\fullvrefm{\ea\renumvref\fullvref\relax}%
   \def\tmp{#1}\sedef{notepre!\the\notenum}{\ea\renumlabel\fullvrefm\relax}%
   \ifx\nextww\undefined
      {\def\printwarn##1{}\xdef\tword{\transformword{#2}}}%
   \else \xdef\tword{\nextww}\fi
   \isnextchar={\NoteA}{\NoteA={}}%
}
\ifx\_partokenset\undefined
   \def\defnoteA{\def\NoteA=##1##2\par}
\else
   \def\defnoteA{\def\NoteA=##1##2\_par}
\fi
\defnoteA{%
   \sdef{notetext!\the\notenum}{\ignorespaces#2}%
   \sedef{noteref!\the\notenum}{\fullvrefm}%
   \ifx\nextww\undefined
      \ifx^#1^\sdef{pword!\the\notenum\ea}\ea{\tword}\else \sdef{pword!\the\notenum}{#1}\fi
   \else
      \sdef{pword!\the\notenum\ea}\ea{\nextwwA}%
      \let\nextww=\undefined \let\nextwwA=\undefined
   \fi
   \ea\addNote\expanded{{\fullvrefm}{\the\notenum}{\tword}}%
}
\def\addNote#1#2#3{%
   \ifx^#3^% \tword is empty
      \newaction{#1}{\addto\prebuff{\doNote{#2}{}}}%
   \else
      \newaction{#1}{\replpre{\doNote{#2}}{#3}{\notefail{#2}}}%
   \fi
}

   \_doc
   `\renumlabel` `<full-vref>\relax` expands to the numeric part of
   <full-vref> and appends the `--<to>` part if the `\tmp` macro is in the
   format `<chapter>:<from>-<to>`. The <to> part is re-calculated in order to
   the the number of verses between `<from>` and `<to>` be kept.
   If the `<to>` part is in the format <chapter>:<verse>
   then it is unchanged. The `\renumlabel` macro must be expandable, so we
   cannot use `\isinlist` and we prepare special expandable macros `\isdivis`
   and `\iscolon`.
   \_cod

\def\renumlabel#1/#2\relax{#2%
   \ea\isdivis\tmp-\iffalse\else --\ea\renumlabelA\tmp\relax#2\relax \fi
}
\def\renumlabelA#1:#2-#3\relax#4:#5\relax{%
   \iscolon#3:\iffalse \the\numexpr#5+#3-#2\relax \else #3\fi
}
\def\isdivis#1-#2\iffalse{\ifx^#2^}
\def\iscolon#1:#2\iffalse{\ifx^#2^}

   \_doc
   The `\``Note` text is processed and printed in the second step, when the 
   `.txs` file is read. Actions are assigned to each verse and they are run
   before the appropriate verse is printed. And `\``Note` action says:
   \begtt
   \replpre{\doNote{<note-num>}}{<tword>}{\notefail{<note-num>}}
   \endtt
   It means that the `<tword>` is searched in the verse text and
   replaced by `\doNote{<note-num>}{<tword>}`.
   If `<tword>` is not found then `\notefail{<note-num>}` prints warning
   about it and `\doNote{<note-num>}{}` is prefixed before the verse text.
   \_cod

\def\notefail#1{%
   \printwarn{\csstring\\Note: \currverse: The text "\unexpanded\ea{\text}" not found}%
   \replpre{\doNote{#1}}{}{}% \Note is registered with the beginning of the verse
}

   \_doc
   And the `\doNote{<note-num>}{<tword>}` prints the real note text in the second step,
   when the verse text from `\buff` is processed.
   \_cod

\def\prevtmpb{}
\def\doNote#1#2{%
   \edef\tmpb{\cs{notepre!#1}}%
   \notelog{\space\space \csstring\\Note \tmpb\space {#2}={\cs{pword!#1}} (#1)}%
   \noteinsert{%
      {\bf \ifx\prevtmpb\tmpb \else \tmpb \enskip \global\let\prevtmpb=\tmpb \fi
       \trymakedest{n:\cs{noteref!#1}}%
       \ea \ifx \csname pword!#1\endcsname \empty
                 \else \ea\ea\ea\upcasefirst \csname pword!#1\endcsname. \fi}%
      \cs{notetext!#1}}%
   {\notecolor#2}%
}
\def\_printfnotemark{}
\def\_textindent#1{\noindent}

   \_doc
   The phrase `{<word>}` used in notes must be exactly the same as the word used in
   the `.txs` text. But we want to capitalize the first letter of the <word>
   when printing. You can say `\let\upcasefirts=\relax` if you don't want
   this feature.
   \_cod

\def\upcasefirst #1{\uppercase{#1}}

   \_doc
   Because there is asynchronous processing of the `\``Note` text, we have a problem
   when an error occurs here. We cannot reference to appropriate line where
   the `\``Note` is written. So, we print the parameters of processed
   `\``Note` to the log file. The user can look into this file and the last
   printed `\``Note` parameters here refers probably to the `\``Note` where the
   reason of the error is.\nl
   The logging is done by `\notelog{<text>}`. It is `\wlog` by default but
   you can set it to `\ignoreit` or `\wterm`.
   \_cod

\let\notelog=\wlog

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Inserting data from format files
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   `\fmtpre {<gen-vref>}{<what>}` adds <what> to `\fmtprebuff`, i.e.\ at the
   beginning of the verse.\nl
   `\ftmadd {<gen-vref>}{<what>}` adds <what> to `\buff`, i.e.\ at the end
   of the verse.\nl
   `\fmtins {<gen-vref>}{<text>}{<what>}` inserts <what> after <text> in the
   verse. If <text> is not found then <what> is inserted like `\fmtpre` does it\nl
   All these commands allocate new action using `\newaction`.
   \_cod

\let\FormatedBook=\CommentedBook
\def\fmtpre#1#2{\newaction{\gentovref{#1}}{\addto\fmtprebuff{#2}}}
\def\fmtadd#1#2{\newaction{\gentovref{#1}}{\addto\buff{#2}}}
\def\fmtins#1#2#3{\newaction{\gentovref{#1}}{\replpre{\fmtafter{#3}}{#2}{\fmtfail{#3}}}}
\def\fmtafter#1#2{#2#1}
\def\fmtfail#1{\fmtwarn\addto\fmtprebuff{#1}}
\def\fmtwarn{\printwarn{\string\fmtins: \currverse: The text "\unexpanded\ea{\text}" not found}}

   \_doc
   `\begcenter` starts the centering mode. It opens a group and does
   setting. User must use paired `\endcenter` in order to close this group.
   The `\centeringmode` status is checked by `\encenter` because curious error
   (about `#` character) should be occur without this checking.
   \_cod

\newdimen\centermargin \centermargin=4em
\def\begcenter{\par \ifnum\lastpenalty<10000 \medskip \fi
   \bgroup
   \def\centeringmode{y}
   \parindent=0pt
   \leftskip=\centermargin plus1fill
   \rightskip=\leftskip
}
\def\endcenter{\par
   \ifx\centeringmode\undefined
      \printwarn{\noexpand\endcenter ignored: no \noexpand\begcenter precedes}
   \else \egroup \medskip \fi}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Printing verses from `.txs` files
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   When Bible text is processed then book mark is saved to
   `\currbook` and each input line is separated to the
   <chapter-num>:<verse-num> and <verse-text>.\nl
   The `\processverse <full-vref><space><verse-text>\end` is repeatedly processed.
   \_cod

\eoldef\processline#1{\processverse \currbook/#1\end}

   \_doc
   `\processverse <full-vref><space><verse-text>\end` does
   \begitems
   * defines `\currverse` as <full-vref>,
   * prepares `\currversenum`, `\curversetext`, `\currchapnum` from <full-vref>,
   * defines `\buff` as <verse-text>,
   * processes all actions from `\alist!<full-vref>`,
   * if `\currchapnum` changed, prints new chapter by `\printchap` 
   * prints verse from `\buff` using `\printverse`
   \enditems
   \_cod

\newcount\chapnum
\def\processverse #1 #2\end{%
   \edef\currverse{#1}%
   \preparechapverse #1
   \let\prelinkV=\currversenum
   \def\buff{#2}\def\fmtprebuff{}\def\prebuff{}%
   \ifx\verseto\empty \csname alist!#1\endcsname \else
      \fornum \versefrom..\verseto \do{\csname alist!\currbook/\currchapnum:##1\endcsname}%
   \fi
   \ifnum\currchapnum=\chapnum \else
       \let\prelinkC=\currchapnum \chapnum=\currchapnum\relax \printchap \fi
   \printverse
}
\def\preparechapverse #1/#2:#3 {\def\currchapnum{#2}%
   \def\verseto{}%
   \isdivisin #3-\iftrue \defversefromto #3\end
   \else \def\currversenum{#3}\let\currversetext=\currversenum
   \fi
}
\def\defversefromto #1-#2\end{%
   \def\versefrom{#1}\def\verseto{#2}%
   \def\currversenum{#1}\def\currversetext{#1--#2}}

   \_doc
   `\printverse` prints verse from `\currversenum` and (possibly changed) `\buff`.
   It prints the single raised verse number first.\nl
   `\printchap` prints beginning of the new chapter.
   `\printbeforefirst` is a macro which is executed just before first verse
   of the chapter, after all material from `\fmtpre` is executed. I.e after
   printing a chapter name (if declared by `\fmtpre`). 
   \_cod

\def\printverse{%
   \fmtprebuff % material accumulated by \fmtpre
   \ifnum\currversenum=1 \printbeforefirst \fi
   \quitvmode \mark{\currchapnum:\currversetext}%
   \ifx\verseto\empty \trymakedest{v:\currverse}%
   \else \fornum \versefrom..\verseto \do{%
       \wlog{xxxxx v:\currbook/\currchapnum:##1}\trymakedest{v:\currbook/\currchapnum:##1}}%
   \fi
   \raise5pt\hbox{\unless\ifnum\currversenum=1 \markfont\currversetext\fi}%
   \prebuff\buff \space
}
\def\printchap{\bigskip}

\def\printbeforefirst{%
   \par\nobreak
   \setbox0=\vtop{\kern0pt \_ewref\sxdef{{ch!\currbook/\the\chapnum}{\string\mypage}}
                  \hbox{\setfontsize{at50pt}\bf\LiRed\the\chapnum}}
   \dp0=0pt
   \tmpdim=\lrmargin
   \advance\tmpdim by4pt
   \ifnum\the\chapnum>9 \advance\tmpdim by19pt \fi
   \ifodd\trycs{ch!\currbook/\the\chapnum}{0}
      \moveright\tmpdim \line{\hss\box0}
   \else \moveleft\tmpdim \box0 \fi
   \nobreak \nointerlineskip \noindent
}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Bible references
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   We prepare temporary macros first.\nl
   `\isspacein <text> \iftrue` is true if `<text>` includes a space.\nl
   `\iscolonin <text>:\iftrue` is true if `<text>` includes a colon.\nl
   `\isdivisin <text>-\iftrue` is true if `<text>` includes a divis.
   \_cod

\def\isspacein #1 #2\iftrue{\isempty{#2}\iffalse}
\def\iscolonin #1:#2\iftrue{\isempty{#2}\iffalse}
\def\isdivisin #1-#2\iftrue{\isempty{#2}\iffalse}

   \_doc
   The \code{\<} will be set to active as character equivalent to
   the macro `\bref<text>>`. This macro does all job with the hyperlinks.
   Fist of all, it scans the parts of the `<text>` and saves them to
   \begitems
   * `\ltextP` ... the text before a link specification (given in `"..."`)
   * `\ltextB` ... the book mark followed by `~`
   * `\ltextC` ... the chapter number followed by `:`
   * `\ltextV` ... the verse number
   * `\ltextS` ... sub-verse identifier (`a` if there is a verse `4a`)
   * `\ltextF` ... the `--` if the `<from>-<to>` format is given
   * `\ltextN` ... the `<to>` part from the `<from>-<to>` format.
   \enditems
   All these macros above can be empty if the appropriate part of the
   scanned `<text>` is missing.
   The `\linkpre` macro includes `v` if it is verse link,
   includes `n` if it is note link and `g` if it is gloss link.
   These macros will be converted due to `\renum` data (if needed)
   and printed by `\linktext`.
   \_cod

\def\linktext{\ltextP\ltextB\ltextC\ltextV\ltextS\ltextF\ltextN}
\def\bref #1>{\let\brefH=\relax \def\linkspec{#1}\isnextchar"{\brefA}{\brefA""}#1>}
\def\brefA"#1"{\def\ltextP{#1}%
   \isnextchar{ }{\addto\ltextP{~}\afterassignment\brefB\let\next= }%
      {\isnextchar{_}{\def\brefH{}\afterassignment\brefB\let\next= }{\brefB}}%
}
\def\brefB #1>{% #1 is link-spec
   \def\ltextB{}\def\ltextC{}\def\ltextF{}\def\ltextN{}%
   \isspacein #1 \iftrue
         \iscolonin #1:\iftrue \brefBookChapterVerse #1>%
         \else \brefBookChapter #1>\fi
   \else \iscolonin #1:\iftrue \brefChapterVerse #1>%
   \else \brefVerse #1>%
   \fi\fi
   \def\linkpre{v}%
   \isnextchar n{\def\linkpre{n}\brefC}%
      {\isnextchar g{\def\linkpre{g}\brefC}%
         {\isnextchar a{\def\linkpre{a}\brefC}%
             {\isnextchar i{\def\linkpre{i}\brefC}{\brefD}}}}%
}
\def\brefC{\afterassignment\brefD \let\next= }

\def\brefBookChapterVerse #1 #2:#3>{\def\ltextB{#1~}\brefChapterVerse #2:#3>}
\def\brefBookChapter #1 #2>{\def\ltextB{#1~}%
    \isinlist\nochapbooks{ #1 }\iftrue
        \def\ltextC{}\let\ltextCin=\ltextnCin \afterfi{\brefVerse #2>}%
    \else \afterfi{\brefChapter #2>}\fi}
\def\brefChapterVerse #1:#2>{\def\ltextC{#1:}\brefVerse #2>}
\def\brefVerse #1>{%
   \isdivisin #1-\iftrue \brefFromTo #1>%
   \else \versedef#1\relax\fi
}
\def\brefChapter #1>{%
   \isdivisin #1-\iftrue \brefFromTo #1>\let\ltextC=\ltextV
   \else \def\ltextC{#1}\fi
   \def\ltextV{}\def\ltextS{}%
}
\def\brefFromTo #1-#2>{\versedef#1\relax\def\ltextF{--}\def\ltextN{#2}}

   \_doc
   Because the verse number can be in the format `11b`, we need to separate
   the numeric part of this and save it to `\ltextV` and the rest is saved
   to `\ltextS`. This is done by the `\versedef <verse>\relax` macro.
   \_cod

\def\versedef {\afterassignment\versedefB \tmpnum=0}
\def\versedefB #1\relax{\edef\ltextV{\the\tmpnum}\def\ltextS{#1}}

   \_doc
   Now, we create `\linkfspec` from scanned data. It is <full-vref>
   used for hyperlinks. We must manage all situations of incomplete links.
   \_cod

\def\brefD{%
   \ifnum 0\ltextV=0 \def\ltextV{}\fi
   \if a\linkpre \ifx\ltextV\empty \else \edef\ltextC{\ltextV:}\def\ltextV{}\fi\fi
   \edef\linkfspec{\ea\ltextBin\ltextB~/\ea\ltextCin\ltextC:/\ea\ltextVin\ltextV:/}%
   \brefL
}
\def\ltextBin #1~#2/{\ifx^#1^\prelinkB \else #1\immediateassignment\def\prelinkB{#1}\fi/}
\def\ltextCin #1:#2/{\ifx^#1^\prelinkC \else #1\immediateassignment\def\prelinkC{#1}\fi:}
\def\ltextVin #1:#2/{\ifx^#1^\prelinkV \else #1\immediateassignment\def\prelinkV{#1}\fi}
\def\ltextnCin #1:#2/{\prelinkC:\immediateassignment\let\ltextCin=\ltextsCin}
\let\ltextsCin=\ltextCin

   \_doc
   `\prelinkB` is <book-mark> of last referenced book.
   `\prelinkC` is <chapter-num> of last referenced chapter.
   They are used if the reference is not full. They are initialized at the
   beginning of books and chapters and they are changed locally in the `\``Note` text.
   If the \code{\<} is used then they are re-initialized.
   \_cod

\def\<{\let\prelinkB=\currbook \let\prelinkC=\currchapnum \let\prelinkV=\currversenum \bref}

   \_doc
   `\oncebref` includes an additional macros which have to be processed in
   the single link, for example `\reduceref`. The `\everybref` token list
   includes macros which have to be applied for all links.
   \_cod

\newtoks\everybref
\def\oncebref{}

   \_doc
   Macro `\brefL` recalculates `\linkfspec` and `\linktext` due to `\renum` data and
   creates the link `\linkpre:\linkfspec` with the text `\linktext`.\nl
   `\renumlinktext <full-vref-ori>\relax<full-vref-modified>\relax`
   does re-calculation of the parts of the `\linktext` macro.\nl
   The `\linkfspecone` solves situation when chapter is given but no verse
   number: we must set the verse number to 1.\nl
   If the link destination is article, then the `<full-vref>` has reduced
   format `<book>/<chapter>`. If the link destiantion is itroduction then
   the `<full-vref>` has more reduced format: `<book>/`.\nl
   `\linklog {<text>}` macro prints logging info of the link in the format
   \begtt \catcode`<=13 \adef({\string<} \adef){\string>}
   (<link-spec>) = [<full-vref>]{<printed-link>}
   \endtt
   `\linklog` is `\wlog` by default and when `\tracinglinks` is set.
   It is `\ignreit` when `\notracinglinks` is set.
   You can set it to `\wterm` if you want.
   \_cod

\def\brefL{%
   \edef\linkfspecm{\ea\renumvref\linkfspec\relax}%
   \ifx\linkfspec\linkfspecm \else
      \ea\ea\ea\renumlinktext \ea\linkfspec \ea\relax \linkfspecm \relax
      \let\linkfspec=\linkfspecm
   \fi
   \ifx\ltextV\empty \ifx\ltextC\empty \else \ea\linkfspecone \linkfspec\end \fi\fi
   \if a\linkpre\relax \ea\linkfspecarticle \linkfspec\end \fi
   \if i\linkpre\relax \ea\linkfspecintro \linkfspec\end \fi
   \linklog{\sspace <\unexpanded\ea{\linkspec}>\linkpost = [\linkpre:\linkfspec]%
           {\ifx\brefH\empty\unexpanded\ea{\ltextP}\else\unexpanded\ea{\linktext}\fi}}%
   \ensuredest \createlink
}
\def\linkfspecone #1:#2\end{\def\linkfspec{#1:1}\def\prelinkV{1}}
\def\linkfspecarticle #1/#2:#3\end{\def\linkfspec{#1/#2}}
\def\linkfspecintro #1/#2\end{\def\linkfspec{#1/}}

\def\renumlinktext #1/#2:#3\relax #4/#5:#6\relax{%
   \ifx\ltextC\empty \else \def\ltextC{#5:}\fi
   \def\ltextV{#6}%
   \ifx\ltextN\empty \else
      \ifx\ltextF\ltextDD
          \isinlist\ltextN{:}\iftrue
             \ifcsname rn!\tmark!#1/\ltextN\endcsname \edef\ltextN{\cs{rn!\tmark!#1/\ltextN}}\fi
          \else \edef\ltextN{\the\numexpr#6+\ltextN-#3\relax}\fi
      \else \let\tmp=\ignoreit % \ltextN is a list of verses, for example 7,9,13
          \ea\foreach\ltextN,\do ##1,{\edef\tmp{\tmp,\the\numexpr#6+##1-#3}}%
          \let\ltextN=\tmp
      \fi
   \fi
}
\def\ltextDD{--}

\def\sspace{\space\space\space\space}
\def\linkpost{\if v\linkpre \else \linkpre\fi \space}

   \_doc
   `\tracinglinks` and `\notracinglinks` are defined here.
   \_cod

\def\tracinglinks{\let\linklog=\wlog}
\def\notracinglinks{\let\linklog=\ignoreit}
\tracinglinks

   \_doc
   `\createlink` creates link only if it refers to the place of printed book
   because we don't want to see many warnings about unreferenced links when
   we try to print only selected books. It creates link 
   `\linkpre:\linkfspec` with the text `\linktext`\nl
   The link is created only if the book is to be printed, i.e. the
   `\pbook!<book>` is defined. The link is created always if a user declared
   `\tracingallrefs`.
   \_cod

\def\createlink{{%
   \ifx\brefH\empty \let\linktext=\ltextP\fi
   \ea\isprintedbook\linkfspec \iftrue
   \link[\linkpre:\linkfspec]{\Blue}{\linktext}%
   \else {\Blue\linktext}\fi}%
}
\def\isprintedbook #1/#2\iftrue{\ifcsname pbook!#1\endcsname}
\def\tracingouterlinks{\def\isprintedbook ##1\iftrue{\iftrue}}

   \_doc
   We don't create destinations for all verses, notes etc. but only for
   those which are referenced.
   The macro `\ensuredest` is called from `\createlink` and it saves immediatelly
   `\sdef{<link>:<full-vref>}{}`
   to the special file `\jobname.xrf`. And the macro `\pg` saves immediatelly
   `\sdef{pg:<link>:<full-vref>}{??}` to this file.
   This `.xrf` file is read before standard
   `.ref` file. All link destinations save `\Xdest{<full-vref>}` to the
   `.ref` file. The macro `\Xdest` does nothing if `\pg:<link>:<full-vref>` is not
   defined (from `.rfx` file). Otherwise, it is defined as a correct pageno.
   This result is used in the `\pg` macro.
   If `\<link>:<full-vref>` is not defined, no link destination is crated.
   First \TeX/ run creates `.ref` and `.xrf` files and does not create any
   hyperlink destinations. Second \TeX/ run uses data from these files
   and create correct hyperlinks and page numbers.
   \_cod

\newwrite\xrf
\immediate\openout\xrf=\jobname.xrf
\openref

\def\ensuredest{\immediate\write\xrf{\string\sdef{\linkpre:\linkfspec}{}}}
\refdecl{
   \isfile{\jobname.xrf}\iftrue \input{\jobname.xrf}\fi^^J
   \def\Xdest#1{\ifcsname pg:#1\endcsname \sxdef{pg:#1}{\_ea\_usesecond\_currpage}\fi}^^J
   \def\mypage{\_ea\_usesecond\_currpage}
}
\def\trymakedest#1{%
   \ifcsname #1\endcsname \dest[#1]\ea\glet\csname #1\endcsname \undefined \fi
   \_ewref\Xdest{{#1}}%
}

   \_doc
   The `\pg` macro should be used after \code{<...>}, i.e. the `\linkpre`
   and `\linkfspec` are defined. We use them. And the page number is saved to
   the `\pg:<link>:<full-vref>` macro in the second \TeX/ run.
   \_cod

\def\pg{%
   \ifcsname pg:\linkpre:\linkfspec\endcsname
       {\edef\linktext{\cs{pg:\linkpre:\linkfspec}}\let\brefH=\relax \createlink}%
   \else {\Red ??}\fi
   \immediate\write\xrf{\string\sdef{pg:\linkpre:\linkfspec}{??}}%
}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Language variants
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   `\variants <number-of-variants> {<tmark-A>} {<tmark-B>} {<tmark-C>} ...`\nl
   sets `\numvariants=<number-of-variants>` and does `\def\tmarkA{<tmark-A>}`
   `\def\var!1{<tmarkA>}` `\def\var!2{<tmark-B>}` `\def\var!3{<tmark-C>}` etc.
   \_cod

\newcount\numvariants
\def\variants{\tmpnum=0 \afterassignment\variantsA \numvariants}
\def\variantsA{%
   \ifnum\tmpnum<\numvariants
      \advance\tmpnum by1
      \afterfi{\variantsB{\the\tmpnum}}%
   \fi
}
\def\variantsB#1#2{%
   \ifnum#1=1 \gdef\tmarkA{#2}\sxdef{var!1}{#2}%
   \else \sxdef{var!#1}{#2}%
   \fi
   \variantsA
}

   \_doc
   `\vdef {<phrase-A>} {<phrase-B>} {<phrase-C>} ...` does\nl
   `\def\v!<tmark-B>!<phrase-A>{<phrase-B>}`
   `\def\v!<tmark-C>!<phrase-A>{<phrase-C>}` etc.
   Empty parameter is interpreted as undefined data.
   The internal macro `\vdefB` implements the error message if there is too few
   parameters of `\vdef` and we were read next `\vdef`.
   The `\sedef` used in the `\vdefB{<number>}{<param>}` does real work and 
   it defines (rougly sepaking):
   \begtt \catcode`<=13
   If <param> is "  \def \v!<tmark>!<phrase-A> {<previous param>}
   else             \def \v!<tmark>!<phrase-A> {<param>}
   \endtt 
   \_cod

\def\vdef#1{\def\tmp{#1}%
   \ifcsname v!\trycs{var!2}{}!\tmp\endcsname
       \printwarn{\noexpand\vdef used secondly for phrase {\tmp}, ignored}\fi
   \tmpnum=1 \ea\vdefA
}
\def\vdefA{%
   \ifnum\tmpnum<\numvariants
      \advance\tmpnum by1
      \afterfi{\vdefB{\the\tmpnum}}%
   \fi
}
\def\vdefB#1#2{\def\tmpa{}%
   \ifx\vdef#2\def\tmpa{#2}\fi
   \ifx\tmpa\empty
      \ifx^#2^\else
         \unless \ifcsname v!\cs{var!#1}!\tmp\endcsname
            \sedef{v!\cs{var!#1}!\tmp}{\ifx"#2\prevcs{#1}\tmp \else#2\fi}%
      \fi\fi
      \ea\vdefA
   \else \errmessage{\string\vdef: too few parameters. To be read again: \string#2}%
      \ea\tmpa
   \fi
}
\def\prevcs #1#2{\ifnum#1=2 #2\else \cs{v!\cs{var!\the\numexpr#1-1\relax}!#2}\fi}

   \_doc
   `\x/<phrase>/` expands to `\v!<tmark>!<phrase>` if such control sequence
   is defined else it expands simply to `<phrase>` using `\xA`.
   The `<tmark>` is actual value of the `\tmark` macro.\nl
   Note that if `\tmark` expands to `<t-markA>` (used in the `\variants`
   macro), then the `\v!<tmark>!<phrase>` is not defined and the `\x` macro
   expands to the <phrase> directly.\nl
   `\xA <phrase>/` expands to `<phrase>` and prints warning, if `\tmark`
   is not the first `<t-markA>`.
   \_cod

\def\x/#1/{\trycs{v!\tmark!#1}{\xA#1/}}
\def\xA#1/{#1\ifx\tmarkA\undefined \else \ifx\tmark\tmarkA \else
   \printwarn{\string\x/#1/ -- this phrase is undefined by \csstring\\vdef}%
   \fi\fi
}

   \_doc
   `\ww` `{<phrase-A>} {<phrase-B>} ...` has the same number of parameters as `\vdef`.
   They are separated by spaces. Each parameter can be in the \"single form",
   i.e.\ `{<phrase-A>}` or in the \"extended form", i.e.\ `{<phrase-A>}={<printed-A>}`.
   The macro searchs the correct phrase (given by the `\varnum`) and saves
   it to the `\nextww`. The `\nextwwA` is set to `\nextww` if there is
   single form of the parameter else `\nextwwA` is <printed-A> part of
   the parameter in the extended form. These macros are used in the next
   `\``Note` where they are re-set to `\undefined` meaning.
   \_cod

\outer\def\ww{%
   \ifx\varnum\undefined \setvarnum \fi
   \tmpnum=0
   \ifx\nextww\undefined \ea\wwA
   \else \printwarn{Only single \csstring\\ww must be before \csstring\\Note}%
       \ea\wwB \fi
}
\def\wwA#1#2 {\advance\tmpnum by1
   \def\nextww{#1}\def\nextwwA{#2}%
   \ifx\nextwwA\empty \let\nextwwA=\nextww \else \ea \redefwwA #2\end \fi
   \ifnum\varnum=\tmpnum  \ifnum\tmpnum<\numvariants  \ea\ea\ea \wwB \fi
   \else \ea \wwA \fi
}
\def\wwB#1 {\advance\tmpnum by1
   \ifnum\tmpnum<\numvariants \ea\wwB \fi
}
\def\redefwwA =#1\end{\def\nextwwA{#1}}

   \_doc
   The `\switch` macro reads a pair of parameters using `\switchA`
   and processes the list of variants in `\foreach` loop. If an element from
   the list is equal with `\tmark` then the `#2` (saved in
   `\switchD` token list) is run and next parameter pairs are read by
   `\switchN`, i.e. they are ignored.\nl
   The `\``Note` and `\``ww` are defined as `\outer` in order to better diagnose
   mistakes with number of parameters of `\``ww` or missig empty line after `\``Note`
   text. But we want to skip such objects in `\switch` parameters. This is
   the reason why we run `\unsetouter` before the `\switch` parameter is
   read and we run `\setouter` in order to return to the normal setting.
   \_cod

\newtoks\switchD
\def\switch {\let\switchN=\switchA \unsetouter \switchN}
\long\def\switchA #1#2{\switchD={\setouter #2\let\switchN=\switchI}%
   \ifx\relax#1\relax \the\switchD
   \else \foreach #1,\do ##1,{\def\tmp{##1}\switchC}%
   \fi
   \futurelet\next\switchB
}
\def\switchB{\ifx\next\bgroup \unsetouter \ea\switchN \else \setouter \fi}
\long\def\switchI #1#2{\futurelet\next\switchB}
\def\switchC{\ifx\tmp\tmark \the\switchD \fi}
\def\unsetouter{\slet{ww}{relax}\slet{Note}{relax}}
\def\setouter{\slet{ww}{iww}\slet{Note}{iNote}}
\let\iww=\ww     % backup of outer ww
\let\iNote=\Note % backup of outer Note

   \_doc
   `\setvarnum` sets the `\varnum` as the position number of the current
   language variant due to the value of `\tmark`. The `\variants`
   declaration must precede.
   \_cod

\def\setvarnum{\gdef\varnum{0}%
   \ifnum\numvariants=0 \gdef\varnum{1}\wlog{There is only single language variant (1)}%
   \else
      \tmpnum=0
      \loop
         \advance\tmpnum by1
         \ea\ifx \csname var!\the\tmpnum\endcsname \tmark \xdef\varnum{\the\tmpnum}\fi
         \ifnum\tmpnum<\numvariants \repeat
      \ifnum \varnum=0 \errmessage{\noexpand\tmark isn't set, \noexpand\setvarnum failded}%
      \else \wlog{Language variant set by \string\tmark{\tmark} (\varnum)}\fi
   \fi
}

   \_doc
   `\renum <book-mark> <chapter-num>:<verse-num> = <t-mark> <chap-num>:<from>-<to>`
   does
   \begtt
   \def \rn!<t-mark>!<full-vref>{<chap-num>:<from>}
   \def \rn!<t-mark>!<full-vref+1>{<chap-num>:<from+1>}
   \def \rn!<t-mark>!<full-vref+2>{<chap-num>:<from+2>}
   ... etc.
   \def \rn!<t-mark>!<full-vref+n>{<chap-num>:<to>}
   \endtt
   \_cod

\def\renum #1 #2:#3 = #4 #5:#6-#7 {%
   \tmpnum=#3\relax
   \fornum #6..#7 \do {\sxdef{rn!#4!#1/#2:\the\tmpnum}{#5:##1}\incr\tmpnum}%
}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Inserting notes to the page
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   We declare new insert `\noteins` used in the `\output` routine.
   \_cod

\newinsert \noteins
\skip\noteins=\bigskipamount  % noterule height
\count\noteins=500            % two columns
\dimen\noteins=\maxdimen      % full page of notes allowed

   \_doc
   The `\noteinsert {<text>}` inserts its parameter to the `\noteins`.
   We open the `\insert` and set basic parameters using `\noteset`.
   Then the empty box with strut height is inserted in vertical mode
   (in order to consecutive notes have good baselineskip between them).
   Then the `<text>` is printed and the paragraph is finalized.
   The empty box with strut depth is appended after the paragraph
   (in order to the same reason). Final `\penalty0` allows breaking between
   notes.
   \_cod

\def\noteinsert #1{\insert\noteins{%
   \noteset
   \vbox to\ht\_strutbox{}\nobreak \vskip-\baselineskip
   #1\unskip\par \nobreak \vskip-\baselineskip
   \hbox{\lower\dp\_strutbox\vbox{}}
   \penalty0
}}
\def\noteset{\Heros\cond \_scalemain \_typoscale[800/800] % Heros condensed 80%
   \Black \nobreak
   \widowpenalty=20 \clubpenalty=20
   \leftskip=0pt \rightskip=0pt \parfillskip=0pt plus1fill
   \parindent=0pt
   \lineskiplimit=-3pt
   \hsize=.5\hsize \advance\hsize by-1em \relax % two columns
   \everypar{}
}

   \_doc
   We add macros for inserting two columns of notes from `\noteins` into the
   page. First, we add `\noterule` with the space given by
   `\skip\noteins`. The `\noteins` material is prefixed by `\penalty0` (in
   order to allow the next `\vsplit` operation) and the `\vfil` is added (in order
   to the case when the second column is smaller than the first one).
   The `\splittopskip` is set and first `\vsplit to0pt` adds skip given by
   `\splittopskip` to the `\noteins`. The `\_balancecolumns` from \OpTeX/
   for splitting to two columns is used. We need to set `\_Ncols`, `\_dimen0`
   and `\_box6` before running `\_balancecolumns`. We need to insert
   `\vskip\splittopskip` because `\_balancecolumns` supposes that the typesetting point
   resides at the first baseline of the columns.\nl
   The final `\vskip` does \"raggedbottom". We need to add `1filll` in order
   to suppress the `\vfill` from the `\end` algorithm. We add `minus6pt`
   because the height of two columns can be by half-line higher than the
   insertion algorithm excepts (in the case with odd lines before
   splitting to the two columns).
   \_cod

\addto\_pagecontents{%
   \ifvoid\noteins \else
      \vskip\skip\noteins \noterule
      \setbox\noteins=\vbox{\penalty0 \unvbox\noteins \vfil}
      \splittopskip=12pt
      \setbox0=\vsplit\noteins to0pt  % adding \splittopskip to \noteins
      \def\_Ncols{2}
      \_dimen0=.5\_ht\noteins \_setbox6=\_box\noteins
      \vskip\splittopskip
      \_balancecolumns
   \fi
   \unless\ifvoid\botins \unvbox\botins
   \else \vskip 0pt plus1filll minus8pt \fi
}
\_def \noterule {\_kern-3pt {\Black \_hrule width\hsize}\_kern 2.6pt }

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Inserting images and articles to the page
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   `\botins` is analogue insert as `\_topins` but the material is inserted
   to the bottom of the page. The material is created by
   `\botinsert...\endbot` pair of control sequences.
   We use it for inserting images and articles to the page.
   \_cod

\newinsert\botins
\def\botinsert{\setbox0=\vbox\bgroup}
\def\endbot{\par\egroup
   \insert\botins{\splittopskip=0pt \penalty100
      \hrule height0pt \nobreak\medskip\bigskip \unvbox0
   }%
}
\skip\botins=\_zoskip % no space added when a topinsert is present
\count\botins=1000 % magnification factor (1 to 1)
\dimen\botins=\_maxdimen % no limit per page

   \_doc
   `\putImage` `<chatper>:<verse> {<title>} [<label>] (<params>) {<image-file>}`
   inserts the given image to the page where the begining of the verse given
   by <chapter>:<verse> exists. We register a new action by
   `\newaction{<full-vref>}{\doImage{<title>}[<label>](<params>){<image-file>}}`.
   The `\doImage` puts the image by `\botinsert`...`\endisert` pair.
   The `\botTitle{<title>}[<label>]` prints the title of the image (or
   article or watever is put to the bottom of the page) and inserts the
   destination of hyperlink based on the <label>, if the <label> isn't empty.
   \_cod

\def\putImage #1 #2#3[#4]#5(#6)#7{% chap:verse {Title} [label] (params) {image-file.pdf}
   \edef\fullvref{\gentovref{#1}}%
   \edef\fullvrefm{\ea\renumvref\fullvref\relax}%
   \ea\newaction\ea{\fullvrefm}{\doImage{#2}[#4](#6){#7}}%
}
\def\doImage #1[#2](#3)#4{% {Title}[label](params){image-file.pdf}
   \botinsert
      \botTitle{#1}[#2]%
      \kern3pt \nobreak
      \hbox{\picw=\hsize #3\inspic{#4}}%
   \endbot
}
\def\botTitle#1[#2]{\hbox{\captionfont
   \ifx^#2^\else \botDest{#1}[#2]\fi
   \rlap{\Grey \vrule height1.2em depth.5em width\hsize}\White\kern12pt #1}%
}
\picdir={images/}
\def\botDest#1[#2]{\label[#2]\wlabel{#1}\dest[ref:#2]}

   \_doc
   `\putArticle` `<chapter>:<verse> {<title>} [<label>] (<params>)`
   inserts an article given in the file `articles-*.tex` signed by
   `\Article [<label>]`. The article starts at the page where
   <chapter>:<verse> is. We register a new action by
   `\newaction{<full-vref>}{\doArticle{<title>}[<label>](<params>)}`.
   The `\doArticle` inserts the article to one or more pages by
   `\botinsert`...`\endinsert`. The Article is printed to two columns per
   page, all collumns of the article is completely balanced. First we
   calculate the number of pages, then the number of columns `\_Ncols` is 2 times
   number of pages. Then the `\_balancecolumns` macro creates the columns.
   Finally we do re-boxing the output of `\_balancecolumns` in order to
   reach individual columns and create pairs of them by `\fornum` loop.
   These pairs are completed to blocks with LightGrey background.
   These blocks divided by `\break` are inserted into `\botinsert`.
   \_cod

\newcount\articlenum
\def\putArticle #1 #2#3[#4]#5(#6){% chap:verse {Title} [number] (params)
   \edef\fullvref{\gentovref{#1}}%
   \edef\fullvrefm{\ea\renumvref\fullvref\relax}%
   \ea\newaction\ea{\fullvrefm}{\doArticle{#2}[#4](#6)}%
}
\def\doArticle#1[#2](#3){% {Title}[number](params)
   \botinsert
      \incr\articlenum
      \def\botDest##1[##2]{\trymakedest{a:\currbook/##2}}
      \parindent=12pt \iindent=\parindent
      \setbox0=\vbox{\hsize=.458\hsize \emergencystretch=1em
         \hbadness=6000 \baselineskip=\dimexpr\baselineskip plus1pt
         \def\Article[##1]{\endinput}
         \penalty0
         \long\def\searcharticle##1\Article[#2]{}
         \ea\searcharticle \input \articlefile \relax}
      \splittopskip=12pt
      \setbox1=\vsplit0 to0pt % adding \splittopskip
      \tmpnum=\roundexpr{\bp{\ht0}/\bp{1.333\vsize}+0.999} % number of pages
      \multiply\tmpnum by2 % number of columns
      \edef\_Ncols{\the\tmpnum}
      \dimen0=\expr{1/\_Ncols}\ht0 \setbox6=\box0
      \setbox0=\vbox{\_balancecolumns}
      \tmpdim=\ht0 \advance\tmpdim by1.2\baselineskip
      \setbox0=\vbox{\unvbox0 \global\setbox2=\lastbox}
      \setbox0=\hbox{\unhbox2
          \fornum 1..\_Ncols \do {\unskip \global\setbox1##1=\lastbox}}
          \fornumstep -2: \_Ncols..1 \do {
              \hrule height0pt\kern5pt\nobreak\vfill
              \ifnum\_Ncols=##1 \botTitle{#1}[#2]\else \botTitle{}[]\fi
              \kern3pt \nobreak
              \hbox to\hsize{%
                 \rlap{\LightGrey \vrule height\tmpdim depth6pt width\hsize}%
                 \kern\parindent
                 \box1##1\hss\box1\the\numexpr##1-1
                 \kern\parindent
              }
              \break
          }
   \endbot
}
\def\roundexpr#1{\ea\ea\ea\roundexprA\expr{#1}\relax}
\def\roundexprA#1.#2\relax{\ifnum#1=0 0\else #1\fi}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Inserting citations to the page
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   `\putCite` `<gen-vref> {<text>}` creates a citation <text> inserted to the
   top of the page where the verse <gen-vref> is. We regiter a new action by
   `\newaction{<full-vref>}{\dotopCite{<text>}}`.
   \_cod

\def\putCite #1 #2{% chap:verse {text}
   \edef\fullvref{\gentovref{#1}}%
   \edef\fullvrefm{\ea\renumvref\fullvref\relax}%
   \ea\newaction\ea{\fullvrefm}{\dotopCite{#2}}%
}

   \_doc
   `\dotopCite` `{<text>}` creates the citation text by
   `\topinsert`...`\endinsert` form plain
   TeX. We distinguish two cases: the citation on a left page and the citation
   on a right page. We sawe the page position using `\_ewref` to the .ref
   file as `\sxdef{ct!<citenum>}{\mypage}` and we know the page position in
   the second TeX run and use it in the `\ifodd` condition.
   The typesetting parameters differ in \"left" and \"right" case.
   \_cod

\newcount\citenum
\def\dotopCite #1{%
   \topinsert
   \typosize[12/16]\bi
   \incr\citenum
   \ifodd \trycs{ct!\the\citenum}{0}\relax
       \leftskip=.3\hsize plus1fil \parfillskip=0pt
       \noindent
       \rlap{\hskip\hsize \kern-\leftskip \copy\rqqbox}\hfill
   \else
       \let\quotedby=\quotedbyright
       \rightskip=.3\hsize plus 1fil
       \noindent \llap{\copy\lqqbox}%
   \fi
   {\printCite{#1}\unskip}\par
   \_ewref\sxdef{{ct!\the\citenum}{\string\mypage}}%
%   \vskip-.3\baselineskip
   \endinsert
}
\def\printCite#1{\pdfliteral{2 Tr .15 w .9 g}#1\pdfliteral{0 Tr 0 w 0 g}}

   \_doc
   The `\lqbox` and `\rqbox` include the graphical marks for quotations. First
   one is used at the left pages, second one at the right pages.\nl
   The macro `\quotedby{<author>}` puts the author of the quatation to the
   next line. The macro `\qutedbyright` (which is used at left pages) prints
   the <author> at the last line if there is sufficient space.
   \_cod

\newbox\lqqbox
\newbox\rqqbox
\setbox\lqqbox=\hbox{\lower3pt\hbox{\setfontsize{at70pt}\bf\LiRed„}}
\setbox\rqqbox=\hbox{\kern2pt\lower38pt\hbox{\setfontsize{at70pt}\bf\LiRed“}}
\ht\lqqbox=0pt \dp\lqqbox=0pt
\ht\rqqbox=0pt \dp\rqqbox=0pt

\def\quotedby{\par}
\def\quotedbyright#1{%
   \unskip\nobreak\hfill\penalty0\hskip2em
   \null\nobreak\hskip\iindent\hbox{#1}}

   \_doc
   The following macros `\Cite`, `\insertCite` and `\swapCites` are used for
   insertion of citations to the two-cloumn printed articles.
   The `\Cite``<label>{<text>}` simply saves the <text> to the macro
   `\c!<article-num>!<label>`.
   The `\insertCite``<label><feft-or-right>` inserts the citation declared
   by `\Cite <label>` to the text using `\vadjust`. The variant `\left` and
   `\right` is processed or ignored. This depends on the parity of the
   current page, which is restored from `.ref` file and saved to the macro
   `\cp!<article-num>!<label>`.
   \_cod

\def\Cite #1#2{\sdef{c!\the\articlenum!#1}{#2}}
\def\insertCite #1#2{\def\citelabel{#1}%
   \ifx\left#2\insertCiteleft
   \else \ifx#2\right\insertCiteright\else
   \errmessage{\noexpand\putCite#1: \left or \right expected}%
   \fi\fi
}
\def\insertCiteleft {%
   \ifnum\citepg=1 \opwarning{\noexpand\insertCite\citelabel: \noexpand\swapCites activated}\fi
   \ifodd \numexpr\trycs{cp!\the\articlenum!\citelabel}{0}+\citepg\relax
   \else \insertCitelr \left \fi
}
\def\insertCiteright{%
   \ifodd \numexpr\trycs{cp!\the\articlenum!\citelabel}{0}+\citepg\relax
   \insertCitelr \right \fi
}
\def\insertCitelr#1{\unskip\vadjust{\vbox{%
   \_ewref\sxdef{{cp!\the\articlenum!\citelabel}{\string\mypage}}%
   \vskip6pt
   \advance\hsize by\parindent
   \typosize[12/16]\bi\Grey
       \ifx#1\left
           \def\quotedby{\par\hfill}
           \rightskip=\parindent plus1fil \leftskip=0pt
           \setbox0\vbox{%
              \medskip \noindent
              \llap{\copy\lqqbox}\ignorespaces
              \printCite{\cs{c!\the\articlenum!\citelabel}}\medskip}%
           \hbox{\kern-\parindent\rlap{\White
              \vrule height\ht0 width\dimexpr\hsize}\box0}%
        \else
           \leftskip=\parindent plus1fil
           \parfillskip=0pt
           \setbox0\vbox{%
              \medskip \noindent
              \rlap{\hskip\hsize\kern-\parindent\copy\rqqbox}\hfill
              \ignorespaces \printCite{\cs{c!\the\articlenum!\citelabel}}\medskip}%
           \rlap{\rlap{\White \vrule height\ht0 width\hsize}\box0}%
        \fi
   \vskip6pt
}}}

\def\swapCites{\def\citepg{1}}
\def\citepg{0}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   Insertions into the intro text
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \_cod

%% TBN page 236

\newcount\shapenum
\newdimen\ii \newdimen\w
\def\oblom #1 od #2 odsadit #3 {\par \ii=#1 \w=\hsize
   \ifdim\ii>\_zo \advance\w by-\ii
   \else \advance\w by\ii \ii=\_zo \fi
   \shapenum=1 \tmpnum=0 \def\shapelist{}
   \loop \ifnum\shapenum<#2 \edef\shapelist{\shapelist\_zo\hsize}
      \advance\shapenum by1 \repeat
   \loop \edef\shapelist{\shapelist\ii\w}
      \advance\tmpnum by1 \ifnum\tmpnum<#3 \repeat
   \advance\shapenum by#3 \edef\shapelist{\shapelist\_zo\hsize}
   \doshape}
\def\doshape{\parshape \shapenum \shapelist
   \message{..... \parshape \shapenum \shapelist}
} 
\newcount\globpar
\ifx\_partokenset \_undefined 
   \def\doshape{\global\globpar=0 \def\par{\ifhmode\shapepar\fi}}
   \def\shapepar{\prevgraf=\globpar \parshape\shapenum\shapelist
      \endgraf \global\globpar=\prevgraf
      \ifnum \prevgraf>\shapenum \let\par=\endgraf \fi}
\else
   \def\doshape{\global\globpar=0 \def\_par{\ifhmode\shapepar\fi}}
   \def\shapepar{\prevgraf=\globpar \parshape\shapenum\shapelist
      \endgraf \global\globpar=\prevgraf
      \ifnum \prevgraf>\shapenum \let\_par=\endgraf \fi}
\fi

\def\Citehereleft #1 (#2) #3{{
   \par
           \def\quotedby{\par\hfill}
           \rightskip=\parindent plus1fil \leftskip=0pt
           \setbox0\vbox{{%
             \typosize[12/16]\bi\Grey
              \hsize=.5\hsize
              \medskip \noindent
              \llap{\copy\lqqbox}\ignorespaces
              \printCite{#3}\medskip}}%
   \tmpdim=\ht0 \advance\tmpdim by\baselineskip
   \xdef\lines{\the\numexpr \number\tmpdim / \number\baselineskip \relax}
   \nointerlineskip\vbox to0pt{\kern#1\baselineskip #2
           \hbox{\rlap{\White
              \kern-3mm\vrule height\ht0 width.5\hsize}\box0}%
   \vss}}
   \tmpdim=\hsize \advance\tmpdim by-2\leftskip
   \oblom {.5\tmpdim} od #1 odsadit {\lines}
}
\def\Citehereright #1 (#2) #3{{
   \par
           \def\quotedby{\par\parfillskip=0pt \hfill}
           \leftskip=\parindent plus1fill \rightskip=0pt
           \setbox0\vbox{{%
             \typosize[12/16]\bi\Grey
              \hsize=.5\hsize
              \vskip\medskipamount \rlap{\kern\hsize\copy\rqqbox}\vskip-\medskipamount
              \printCite{\noindent\ignorespaces #3}\medskip}}%
   \tmpdim=\ht0 \advance\tmpdim by\baselineskip
   \xdef\lines{\the\numexpr \number\tmpdim / \number\baselineskip \relax}
   \nointerlineskip\vbox to0pt{\kern#1\baselineskip #2
        \hbox to\hsize{\hss
           \llap{\White \vrule height\ht0 width.5\hsize \kern-3mm}%
           \llap{\box0}}
   \vss}}
   \tmpdim=\hsize \advance\tmpdim by-2\leftskip
   \oblom {-.5\tmpdim} od #1 odsadit {\lines}
}

\def\Citehere{\par \ifodd\pageno \ea\Citehereright \else \ea\Citehereleft \fi}

\def\insertBot #1#2[#3]#4(#5)#6{% {Title} [label] (params) {data}
   \botinsert
      \botTitle{#1}[#3]%
      \kern3pt \nobreak
      \vbox{\picw=\hsize #5 #6}%
   \endbot
}
\def\putBot #1 #2#3[#4]#5(#6)#7{% chap:verse {Title} [label] (params) {image-file.pdf}
   \edef\fullvref{\gentovref{#1}}%
   \edef\fullvrefm{\ea\renumvref\fullvref\relax}%
   \ea\newaction\ea{\fullvrefm}{\insertBot{#2}[#4](#6){#7}}%
}

\def\c[#1/#2]#3{% text podel krivky: \c[init-rotace/repetice]{text}
   \pdfsave\pdfrotate{#1}\rlap{\edef\tmpb{#3}\replstring\tmpb{ }{{ }}\def\tmpa{#2}%
                 \ea\foreach\tmpb\do{##1\tmpa}}\pdfrestore \kern10mm
}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec Outline
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \_cod

\newdimen\colsep
\colsep=10pt

\def\Outline{
   \medskip
%   \filbreak
   \outlinetit
   \everylist={\ifcase\ilevel \or \style I \or \style A \or \style n \fi}
   \sdef{_item:A}{\strut\uppercase\_ea{\_athe\itemnum}. }
   \sdef{_item:I}{\strut\uppercase\_ea{\_romannumeral\itemnum}. }
   \hsize=.5\hsize \advance\hsize by-\colsep
   \emergencystretch=40pt
   \leftskip=0pt \rightskip=0pt
}
\def\rightnote#1{\par
   \setbox0=\hbox{\kern\hsize \kern\colsep
                  \vtop{\leftskip=0pt \kern0pt\noindent\strut\it#1}}
   \ht0=0pt \dp0=0pt \box0 \nointerlineskip
}

   \_doc
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   \sec TODO macros
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   The temporary macros are here. I plan to rewrite them.
   \_cod

\def\chaptit#1{\line{\hss\chapfont\Red#1\hss}
   \nobreak
}
\def\schaptit#1{\bigskip\chaptit{#1}\medskip}

\def\introtit{\chaptit{Úvod}}
\def\outlinetit{\chaptit{Osnova}}

\newcount \chapnum
\def\source#1{}

\def\dopsat{{\Red !!! DOPSAT !!! }}

\def\setvariant#1{}
\def\bibleinput#1 {\bgroup
   \catcode`##=13 \bgroup\lccode`~=`## \lowercase{\egroup\let~}=\processline 
   \input #1
   \egroup
}

\def\bibname{}

   \_doc
   Active character \code{<} used for references.
   \_cod

\def\_afterload{\adef<{\bref}}
\_afterload

\endinput
\_endcode
